{
  "address": "0xdBAF05f116e57ea0Bc69e669992B2Ab55Ce4043b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrappedEtherContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "thisAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NativeWrapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                }
              ],
              "internalType": "struct Asset",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetAmount[]",
          "name": "inputAssetAmounts",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "inputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmounts",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum AssetType",
                      "name": "assetType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "address",
                      "name": "assetAddress",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct Asset",
                  "name": "asset",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetAmount[]",
              "name": "outputAssetAmountsToCaller",
              "type": "tuple[]"
            },
            {
              "internalType": "int16",
              "name": "nextStepIndex",
              "type": "int16"
            },
            {
              "internalType": "int24",
              "name": "fee",
              "type": "int24"
            }
          ],
          "internalType": "struct WorkflowStepResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6438925880806adaa8dba3bef0d4854ef3bb826af01396e787c49af294f6889e",
  "receipt": {
    "to": null,
    "from": "0x242b2eeCE36061FF84EC0Ea69d4902373858fB2F",
    "contractAddress": "0xdBAF05f116e57ea0Bc69e669992B2Ab55Ce4043b",
    "transactionIndex": 74,
    "gasUsed": "808829",
    "logsBloom": "0x
    "blockHash": "0xaab8b64d48685b6096565b532eb92d799355f9edd37e30d34a6e67e04d9a7662",
    "transactionHash": "0x6438925880806adaa8dba3bef0d4854ef3bb826af01396e787c49af294f6889e",
    "logs": [],
    "blockNumber": 9802219,
    "cumulativeGasUsed": "14554565",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6"
  ],
  "numDeployments": 1,
  "solcInputHash": "80d4423b03c40420a3a03475f8c36394",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrappedEtherContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"thisAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeWrapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"inputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmounts\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"enum AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetAmount[]\",\"name\":\"outputAssetAmountsToCaller\",\"type\":\"tuple[]\"},{\"internalType\":\"int16\",\"name\":\"nextStepIndex\",\"type\":\"int16\"},{\"internalType\":\"int24\",\"name\":\"fee\",\"type\":\"int24\"}],\"internalType\":\"struct WorkflowStepResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrapNativeAction.sol\":\"WrapNativeAction\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@freemarket/core/contracts/IWorkflowStep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './model/Asset.sol';\\nimport './model/AssetAmount.sol';\\nimport './model/WorkflowStepResult.sol';\\n\\n/// @title The interface between WorkflowRunner and each Step implementation.abi\\n/// @author Marty Saxton\\n/// @notice All steps must implement this interface.\\ninterface IWorkflowStep {\\n  /// @notice called by WorkflowRunner to execute a workflow step.\\n  /// @param assetAmounts AssetAmounts to be used by the step\\n  /// @param argData Step specific arguments in ABI encoding\\n  /// @param userAddress the address of the user\\n  /// @return the outcome of the step invocation\\n  function execute(\\n    AssetAmount[] calldata assetAmounts,\\n    bytes calldata argData,\\n    address userAddress\\n  ) external payable returns (WorkflowStepResult memory);\\n}\\n\",\"keccak256\":\"0x637a266321d30aeaf12f0582f4ac7c70197aeb3fb4096699eabd23e447b930b5\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./AssetType.sol\\\";\\n\\nstruct Asset {\\n    AssetType assetType;\\n    address assetAddress; // 0x0 for ETH, the ERC20 address.  If it's an account balance, this could represent the token of the account\\n}\\n\",\"keccak256\":\"0x2031c32d59aa2c1c6081156d4d06c9c6aff579a0b8f5d2f81ad86ff503e9e8a8\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './Asset.sol';\\n\\nstruct AssetAmount {\\n  Asset asset;\\n  uint256 amount;\\n}\\n\",\"keccak256\":\"0x4f57b823b38d6e8727dfa94708f63573854b74e44553f6f609bca64cc718ff0e\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/AssetType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nenum AssetType {\\n    Native,\\n    ERC20,\\n    ERC721\\n}\\n\",\"keccak256\":\"0xb9592fa2334517b52dae64c34f0254b4d75b20b60da00c5fc5c6e0316487e963\",\"license\":\"MIT\"},\"@freemarket/core/contracts/model/WorkflowStepResult.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport './AssetAmount.sol';\\n\\n// The return value from the execution of a step.\\nstruct WorkflowStepResult {\\n  // The amounts of each input asset that resulted from the step execution.\\n  AssetAmount[] inputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmounts;\\n  // The amounts of each output asset that resulted from the step execution.\\n  AssetAmount[] outputAssetAmountsToCaller;\\n  // The index of the next step in a workflow.\\n  // This value allows the step to override the default nextStepIndex\\n  // statically defined\\n  // -1 means terminate the workflow\\n  // -2 means do not override the statically defined nextStepIndex in WorkflowStep\\n  int16 nextStepIndex;\\n  // the fee to be withheald out of the output assets (in absolute currency units)\\n  // -1 means use the default fee\\n  int24 fee;\\n}\\n\",\"keccak256\":\"0x0cc72223efa79934b173495c5452dfc6095d2f95cdd4d93c3d0c25cda0893b62\",\"license\":\"MIT\"},\"@freemarket/step-sdk/contracts/LibStepResultBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/model/AssetType.sol';\\nimport '@freemarket/core/contracts/model/WorkflowStepResult.sol';\\n\\nstruct StepResultBuilder {\\n  uint256 inputIndex;\\n  uint256 outputIndex;\\n  uint256 outputToCallerIndex;\\n  WorkflowStepResult result;\\n}\\n\\nlibrary LibStepResultBuilder {\\n  function create(uint256 inputAssetCount, uint256 outputAssetCount) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    AssetAmount[] memory ouputAssetAmountsToCaller = new AssetAmount[](0);\\n\\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetAmountsToCaller, -2, -1));\\n  }\\n\\n  function create(\\n    uint256 inputAssetCount,\\n    uint256 outputAssetCount,\\n    uint256 outputAssetToCallerCount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    AssetAmount[] memory inputAssetAmounts = new AssetAmount[](inputAssetCount);\\n    AssetAmount[] memory ouputAssetAmounts = new AssetAmount[](outputAssetCount);\\n    AssetAmount[] memory ouputAssetToCallerAmounts = new AssetAmount[](outputAssetToCallerCount);\\n\\n    return StepResultBuilder(0, 0, 0, WorkflowStepResult(inputAssetAmounts, ouputAssetAmounts, ouputAssetToCallerAmounts, -2, -1));\\n  }\\n\\n  function addInputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputToken(\\n    StepResultBuilder memory builder,\\n    address tokenAddress,\\n    uint256 amount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.ERC20, tokenAddress), amount);\\n    return builder;\\n  }\\n\\n  function addInputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.inputAssetAmounts[builder.inputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputNative(StepResultBuilder memory builder, uint256 amount) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = AssetAmount(Asset(AssetType.Native, address(0)), amount);\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmount(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmounts[builder.outputIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function addOutputAssetAmountToCaller(\\n    StepResultBuilder memory builder,\\n    AssetAmount memory assetAmount\\n  ) internal pure returns (StepResultBuilder memory) {\\n    builder.result.outputAssetAmountsToCaller[builder.outputToCallerIndex++] = assetAmount;\\n    return builder;\\n  }\\n\\n  function setNextStepIndex(StepResultBuilder memory builder, int16 nextStepIndex) internal pure returns (StepResultBuilder memory) {\\n    builder.result.nextStepIndex = nextStepIndex;\\n    return builder;\\n  }\\n\\n  function setFee(StepResultBuilder memory builder, int24 feeInDeciBips) internal pure returns (StepResultBuilder memory) {\\n    builder.result.fee = feeInDeciBips;\\n    return builder;\\n  }\\n}\\n\",\"keccak256\":\"0x54128c41d82f7a3bca199a750d01456c0190d87a384913f777d49df297776d39\",\"license\":\"MIT\"},\"contracts/Weth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface Weth {\\n  function name() external view returns (string memory);\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n  function withdraw(uint256 wad) external;\\n\\n  function decimals() external view returns (uint8);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function transfer(address dst, uint256 wad) external returns (bool);\\n\\n  function deposit() external payable;\\n\\n  function allowance(address, address) external view returns (uint256);\\n\\n  // fallback() external payable;\\n\\n  event Approval(address indexed src, address indexed guy, uint256 wad);\\n  event Transfer(address indexed src, address indexed dst, uint256 wad);\\n  event Deposit(address indexed dst, uint256 wad);\\n  event Withdrawal(address indexed src, uint256 wad);\\n}\\n\",\"keccak256\":\"0xd5edb0feed1342c095b4d03ff8631d05c6e93d3c9301ef1bb2474c7dfac371c3\",\"license\":\"UNLICENSED\"},\"contracts/WrapNativeAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport '@freemarket/core/contracts/IWorkflowStep.sol';\\nimport '@freemarket/step-sdk/contracts/LibStepResultBuilder.sol';\\nimport './Weth.sol';\\n\\n\\nusing LibStepResultBuilder for StepResultBuilder;\\n\\ncontract WrapNativeAction is IWorkflowStep {\\n  address public immutable contractAddress;\\n\\n  event NativeWrapped(address thisAddr, uint256 amount);\\n\\n  constructor(address wrappedEtherContractAddress) {\\n    contractAddress = wrappedEtherContractAddress;\\n  }\\n\\n  function execute(AssetAmount[] calldata inputAssetAmounts, bytes calldata, address) external payable returns (WorkflowStepResult memory) {\\n    require(inputAssetAmounts.length == 1, 'WrapNativeAction: inputAssetAmounts.length must be 1');\\n\\n    uint256 amount = inputAssetAmounts[0].amount;\\n    emit NativeWrapped(address(this), amount);\\n    Weth weth = Weth(contractAddress);\\n    weth.deposit{value: amount}();\\n\\n    WorkflowStepResult memory rv = LibStepResultBuilder\\n      .create(1, 1)\\n      .addInputAssetAmount(inputAssetAmounts[0])\\n      .addOutputToken(contractAddress, amount)\\n      .result;\\n\\n\\n    return rv;\\n  }\\n}\\n\",\"keccak256\":\"0xc01bce33a245a00b780343f48dfa195b910898787bd4f995ad0991666475a00e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610ec8380380610ec8833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b608051610da361012560003960008181610136015281816101bf015261024b0152610da36000f3fe6080604052600436106100295760003560e01c8063e025f4021461002e578063f6b4dfb41461005e575b600080fd5b610048600480360381019061004391906106f4565b610089565b60405161005591906109f1565b60405180910390f35b34801561006a57600080fd5b50610073610249565b6040516100809190610a22565b60405180910390f35b610091610502565b600186869050146100d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ce90610ac0565b60405180910390fd5b6000868660008181106100ed576100ec610ae0565b5b9050606002016040013590507f2c58f4d3d48c3b93bf8f7fd23f32658ccb97894f02022d2189ffa9903d37bfb8308260405161012a929190610b1e565b60405180910390a160007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019f57600080fd5b505af11580156101b3573d6000803e3d6000fd5b505050505060006102347f0000000000000000000000000000000000000000000000000000000000000000846102258c8c60008181106101f6576101f5610ae0565b5b90506060020180360381019061020c9190610cc9565b61021760018061026d565b61041890919063ffffffff16565b6104649092919063ffffffff16565b60600151905080935050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610275610537565b60008367ffffffffffffffff81111561029157610290610b5d565b5b6040519080825280602002602001820160405280156102ca57816020015b6102b7610565565b8152602001906001900390816102af5790505b50905060008367ffffffffffffffff8111156102e9576102e8610b5d565b5b60405190808252806020026020018201604052801561032257816020015b61030f610565565b8152602001906001900390816103075790505b50905060008067ffffffffffffffff81111561034157610340610b5d565b5b60405190808252806020026020018201604052801561037a57816020015b610367610565565b81526020019060019003908161035f5790505b50905060405180608001604052806000815260200160008152602001600081526020016040518060a001604052808681526020018581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b815250815250935050505092915050565b610420610537565b8183606001516000015184600001805180919061043c90610d25565b815250815181106104505761044f610ae0565b5b602002602001018190525082905092915050565b61046c610537565b6040518060400160405280604051806040016040528060016002811115610496576104956107b5565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff168152508152602001838152508460600151602001518560200180518091906104d990610d25565b815250815181106104ed576104ec610ae0565b5b60200260200101819052508390509392505050565b6040518060a00160405280606081526020016060815260200160608152602001600060010b8152602001600060020b81525090565b604051806080016040528060008152602001600081526020016000815260200161055f610502565b81525090565b6040518060400160405280610578610585565b8152602001600081525090565b6040518060400160405280600060028111156105a4576105a36107b5565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610600576105ff6105db565b5b8235905067ffffffffffffffff81111561061d5761061c6105e0565b5b602083019150836060820283011115610639576106386105e5565b5b9250929050565b60008083601f840112610656576106556105db565b5b8235905067ffffffffffffffff811115610673576106726105e0565b5b60208301915083600182028301111561068f5761068e6105e5565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106c182610696565b9050919050565b6106d1816106b6565b81146106dc57600080fd5b50565b6000813590506106ee816106c8565b92915050565b6000806000806000606086880312156107105761070f6105d1565b5b600086013567ffffffffffffffff81111561072e5761072d6105d6565b5b61073a888289016105ea565b9550955050602086013567ffffffffffffffff81111561075d5761075c6105d6565b5b61076988828901610640565b9350935050604061077c888289016106df565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106107f5576107f46107b5565b5b50565b6000819050610806826107e4565b919050565b6000610816826107f8565b9050919050565b6108268161080b565b82525050565b610835816106b6565b82525050565b604082016000820151610851600085018261081d565b506020820151610864602085018261082c565b50505050565b6000819050919050565b61087d8161086a565b82525050565b606082016000820151610899600085018261083b565b5060208201516108ac6040850182610874565b50505050565b60006108be8383610883565b60608301905092915050565b6000602082019050919050565b60006108e282610789565b6108ec8185610794565b93506108f7836107a5565b8060005b8381101561092857815161090f88826108b2565b975061091a836108ca565b9250506001810190506108fb565b5085935050505092915050565b60008160010b9050919050565b61094b81610935565b82525050565b60008160020b9050919050565b61096781610951565b82525050565b600060a083016000830151848203600086015261098a82826108d7565b915050602083015184820360208601526109a482826108d7565b915050604083015184820360408601526109be82826108d7565b91505060608301516109d36060860182610942565b5060808301516109e6608086018261095e565b508091505092915050565b60006020820190508181036000830152610a0b818461096d565b905092915050565b610a1c816106b6565b82525050565b6000602082019050610a376000830184610a13565b92915050565b600082825260208201905092915050565b7f577261704e6174697665416374696f6e3a20696e7075744173736574416d6f7560008201527f6e74732e6c656e677468206d7573742062652031000000000000000000000000602082015250565b6000610aaa603483610a3d565b9150610ab582610a4e565b604082019050919050565b60006020820190508181036000830152610ad981610a9d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610b188161086a565b82525050565b6000604082019050610b336000830185610a13565b610b406020830184610b0f565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b9582610b4c565b810181811067ffffffffffffffff82111715610bb457610bb3610b5d565b5b80604052505050565b6000610bc76105c7565b9050610bd38282610b8c565b919050565b60038110610be557600080fd5b50565b600081359050610bf781610bd8565b92915050565b600060408284031215610c1357610c12610b47565b5b610c1d6040610bbd565b90506000610c2d84828501610be8565b6000830152506020610c41848285016106df565b60208301525092915050565b610c568161086a565b8114610c6157600080fd5b50565b600081359050610c7381610c4d565b92915050565b600060608284031215610c8f57610c8e610b47565b5b610c996040610bbd565b90506000610ca984828501610bfd565b6000830152506040610cbd84828501610c64565b60208301525092915050565b600060608284031215610cdf57610cde6105d1565b5b6000610ced84828501610c79565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d308261086a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d6257610d61610cf6565b5b60018201905091905056fea26469706673582212207898fce4a094b6c7ddaf98cf9e2cfaec6b91e80ceed22bc43ec212f9d330612d64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c8063e025f4021461002e578063f6b4dfb41461005e575b600080fd5b610048600480360381019061004391906106f4565b610089565b60405161005591906109f1565b60405180910390f35b34801561006a57600080fd5b50610073610249565b6040516100809190610a22565b60405180910390f35b610091610502565b600186869050146100d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ce90610ac0565b60405180910390fd5b6000868660008181106100ed576100ec610ae0565b5b9050606002016040013590507f2c58f4d3d48c3b93bf8f7fd23f32658ccb97894f02022d2189ffa9903d37bfb8308260405161012a929190610b1e565b60405180910390a160007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561019f57600080fd5b505af11580156101b3573d6000803e3d6000fd5b505050505060006102347f0000000000000000000000000000000000000000000000000000000000000000846102258c8c60008181106101f6576101f5610ae0565b5b90506060020180360381019061020c9190610cc9565b61021760018061026d565b61041890919063ffffffff16565b6104649092919063ffffffff16565b60600151905080935050505095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610275610537565b60008367ffffffffffffffff81111561029157610290610b5d565b5b6040519080825280602002602001820160405280156102ca57816020015b6102b7610565565b8152602001906001900390816102af5790505b50905060008367ffffffffffffffff8111156102e9576102e8610b5d565b5b60405190808252806020026020018201604052801561032257816020015b61030f610565565b8152602001906001900390816103075790505b50905060008067ffffffffffffffff81111561034157610340610b5d565b5b60405190808252806020026020018201604052801561037a57816020015b610367610565565b81526020019060019003908161035f5790505b50905060405180608001604052806000815260200160008152602001600081526020016040518060a001604052808681526020018581526020018481526020017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60010b81526020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60020b815250815250935050505092915050565b610420610537565b8183606001516000015184600001805180919061043c90610d25565b815250815181106104505761044f610ae0565b5b602002602001018190525082905092915050565b61046c610537565b6040518060400160405280604051806040016040528060016002811115610496576104956107b5565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff168152508152602001838152508460600151602001518560200180518091906104d990610d25565b815250815181106104ed576104ec610ae0565b5b60200260200101819052508390509392505050565b6040518060a00160405280606081526020016060815260200160608152602001600060010b8152602001600060020b81525090565b604051806080016040528060008152602001600081526020016000815260200161055f610502565b81525090565b6040518060400160405280610578610585565b8152602001600081525090565b6040518060400160405280600060028111156105a4576105a36107b5565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610600576105ff6105db565b5b8235905067ffffffffffffffff81111561061d5761061c6105e0565b5b602083019150836060820283011115610639576106386105e5565b5b9250929050565b60008083601f840112610656576106556105db565b5b8235905067ffffffffffffffff811115610673576106726105e0565b5b60208301915083600182028301111561068f5761068e6105e5565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106c182610696565b9050919050565b6106d1816106b6565b81146106dc57600080fd5b50565b6000813590506106ee816106c8565b92915050565b6000806000806000606086880312156107105761070f6105d1565b5b600086013567ffffffffffffffff81111561072e5761072d6105d6565b5b61073a888289016105ea565b9550955050602086013567ffffffffffffffff81111561075d5761075c6105d6565b5b61076988828901610640565b9350935050604061077c888289016106df565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106107f5576107f46107b5565b5b50565b6000819050610806826107e4565b919050565b6000610816826107f8565b9050919050565b6108268161080b565b82525050565b610835816106b6565b82525050565b604082016000820151610851600085018261081d565b506020820151610864602085018261082c565b50505050565b6000819050919050565b61087d8161086a565b82525050565b606082016000820151610899600085018261083b565b5060208201516108ac6040850182610874565b50505050565b60006108be8383610883565b60608301905092915050565b6000602082019050919050565b60006108e282610789565b6108ec8185610794565b93506108f7836107a5565b8060005b8381101561092857815161090f88826108b2565b975061091a836108ca565b9250506001810190506108fb565b5085935050505092915050565b60008160010b9050919050565b61094b81610935565b82525050565b60008160020b9050919050565b61096781610951565b82525050565b600060a083016000830151848203600086015261098a82826108d7565b915050602083015184820360208601526109a482826108d7565b915050604083015184820360408601526109be82826108d7565b91505060608301516109d36060860182610942565b5060808301516109e6608086018261095e565b508091505092915050565b60006020820190508181036000830152610a0b818461096d565b905092915050565b610a1c816106b6565b82525050565b6000602082019050610a376000830184610a13565b92915050565b600082825260208201905092915050565b7f577261704e6174697665416374696f6e3a20696e7075744173736574416d6f7560008201527f6e74732e6c656e677468206d7573742062652031000000000000000000000000602082015250565b6000610aaa603483610a3d565b9150610ab582610a4e565b604082019050919050565b60006020820190508181036000830152610ad981610a9d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610b188161086a565b82525050565b6000604082019050610b336000830185610a13565b610b406020830184610b0f565b9392505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b9582610b4c565b810181811067ffffffffffffffff82111715610bb457610bb3610b5d565b5b80604052505050565b6000610bc76105c7565b9050610bd38282610b8c565b919050565b60038110610be557600080fd5b50565b600081359050610bf781610bd8565b92915050565b600060408284031215610c1357610c12610b47565b5b610c1d6040610bbd565b90506000610c2d84828501610be8565b6000830152506020610c41848285016106df565b60208301525092915050565b610c568161086a565b8114610c6157600080fd5b50565b600081359050610c7381610c4d565b92915050565b600060608284031215610c8f57610c8e610b47565b5b610c996040610bbd565b90506000610ca984828501610bfd565b6000830152506040610cbd84828501610c64565b60208301525092915050565b600060608284031215610cdf57610cde6105d1565b5b6000610ced84828501610c79565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d308261086a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d6257610d61610cf6565b5b60018201905091905056fea26469706673582212207898fce4a094b6c7ddaf98cf9e2cfaec6b91e80ceed22bc43ec212f9d330612d64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}